---
- name: Check if VMs already exist
  command: snap run multipass list --format json
  register: existing_vms
  changed_when: false
  failed_when: false
  tags:
    - deploy
    - multipass

- name: Parse existing VMs
  set_fact:
    existing_vm_names: "{{ (existing_vms.stdout | from_json).list | map(attribute='name') | list }}"
  when: existing_vms.rc == 0
  tags:
    - deploy
    - multipass



- name: Launch master VM
  command: >
    snap run multipass launch {{ vm_image }}
    --name k3s-master
    --cpus {{ vm_cpu }}
    --memory {{ vm_memory }}
    --disk {{ vm_disk }}
  register: master_launch
  retries: 3
  delay: 5
  until: master_launch.rc == 0
  when: "'k3s-master' not in (existing_vm_names | default([]))"
  tags:
    - deploy
    - multipass

- name: Wait for master VM to be ready
  pause:
    seconds: 30
  when: "'k3s-master' not in (existing_vm_names | default([]))"
  tags:
    - deploy
    - multipass

- name: Configure master VM network
  command: >
    snap run multipass exec k3s-master -- sudo ip addr add {{ master_ip }}/24 dev ens3
  when: 
    - cluster_type == "multi-node"
    - "'k3s-master' not in (existing_vm_names | default([]))"
  tags:
    - deploy
    - multipass


- name: Launch worker VMs
  command: >
    snap run multipass launch {{ vm_image }}
    --name {{ item }}
    --cpus {{ vm_cpu }}
    --memory {{ vm_memory }}
    --disk {{ vm_disk }}
  register: worker_launch
  retries: 3
  delay: 5
  until: worker_launch.rc == 0
  loop: "{{ groups['k3s_workers'] }}"
  when: 
    - cluster_type == "multi-node"
    - item not in (existing_vm_names | default([]))
  tags:
    - deploy
    - multipass

- name: Wait for worker VMs to be ready
  pause:
    seconds: 30
  loop: "{{ groups['k3s_workers'] }}"
  when: 
    - cluster_type == "multi-node"
    - item not in (existing_vm_names | default([]))
  tags:
    - deploy
    - multipass

- name: Configure worker VM networks
  command: >
    snap run multipass exec {{ item }} -- sudo ip addr add {{ hostvars[item].vm_ip }}/24 dev ens3
  loop: "{{ groups['k3s_workers'] }}"
  when: 
    - cluster_type == "multi-node"
    - item not in (existing_vm_names | default([]))
  tags:
    - deploy
    - multipass

- name: Update all VMs
  block:
    - name: Configure sudo access for ubuntu user
      shell: snap run multipass exec k3s-master -- sudo usermod -aG sudo ubuntu
      register: sudo_config
      retries: 2
      delay: 3
      until: sudo_config.rc == 0

    - name: Update master VM
      shell: snap run multipass exec k3s-master -- sudo apt update && sudo apt upgrade -y
      register: master_update
      retries: 2
      delay: 3
      until: master_update.rc == 0

    - name: Update worker VMs
      shell: snap run multipass exec {{ item }} -- sudo apt update && sudo apt upgrade -y
      register: worker_update
      retries: 2
      delay: 3
      until: worker_update.rc == 0
      loop: "{{ groups['k3s_workers'] }}"
      when: cluster_type == "multi-node"

  tags:
    - deploy
    - multipass

- name: Display VM status
  command: snap run multipass list
  register: vm_status
  changed_when: false
  tags:
    - deploy
    - multipass
    - info

- name: Show VM information
  debug:
    msg: |
      VM Status:
      {{ vm_status.stdout }}
  tags:
    - deploy
    - multipass
    - info
